name: Release Edge

on:
  pull_request:
    types: [closed]
    branches: [main]
    paths-ignore:
      - '**.md'
      - '.github/ISSUE_TEMPLATE/**'
      - .gitignore

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

permissions:
  contents: write
  discussions: write
  deployments: write
  packages: write
  pull-requests: read

env:
  CARGO_TERM_COLOR: always
  CONTAINER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PR_NUMBER: ${{ github.event.number }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  docker-images:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
    name: Docker image ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup release version
        working-directory: .
        shell: bash
        run: |
          echo RELEASE_VERSION=$(sed -nE 's/^\s*version = "(.*?)"/\1/p' Cargo.toml) >> $GITHUB_ENV
          echo SHORT_SHA=$(git rev-parse --short ${{ github.sha }}) >> $GITHUB_ENV

      - name: Verify release version
        shell: bash
        run: echo "Creating release v${{ env.RELEASE_VERSION }} - ${{ env.SHORT_SHA }}"

      - name: Create and publish docker images
        uses: ./.github/docker-action
        with:
          registry-host: ${{ env.CONTAINER_REGISTRY }}
          registry-username: ${{ github.actor }}
          registry-password: ${{ env.GITHUB_TOKEN }}
          image-name: ${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}
          image-tags: |
            type=raw,enable=true,priority=100,suffix=-b${{ env.PR_NUMBER }},value=${{ env.RELEASE_VERSION }}
            type=raw,value=edge,priority=200,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
          image-platform: ${{ matrix.platform }}

  build-binaries:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          # - os: windows-latest
          #   target: x86_64-pc-windows-msvc
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js and pnpm
        uses: ./.github/pnpm-action

      - name: Install npm dependencies
        if: steps.cache-pnpm.outputs.cache-hit != 'true'
        run: pnpm install

      - name: Build SPA frontend
        run: pnpm build

      - name: Setup Rust Toolchain
        uses: ./.github/rust-action
        with:
          target-toolchain: ${{ matrix.target }}

      - name: Compile application binary
        run: cargo build --target ${{ matrix.target }} --release --locked

      - name: Archiving compiled binary (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: 7z.exe a -r0 fastrue-${{ matrix.target }}.zip target/${{ matrix.target }}/release/fastrue.exe

      - name: Archiving compiled binary (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          tar czf fastrue-${{ matrix.target }}.tar.gz -C target/${{ matrix.target }}/release/ fastrue
          ls -lh target/${{ matrix.target }}/release && ls -lh | grep fastrue

      - name: Upload compiled binaries
        uses: actions/upload-artifact@v3
        with:
          name: fastrue-binaries
          path: |
            fastrue-${{ matrix.target }}.tar.gz
            fastrue-${{ matrix.target }}.zip
          if-no-files-found: warn
          retention-days: 1

  gh-release:
    needs: [build-binaries,docker-images]
    runs-on: ubuntu-latest
    name: GitHub release
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get previous tag
        uses: WyriHaximus/github-action-get-previous-tag@v1
        id: previoustag
        with:
          fallback: 1.0.0 # Optional fallback tag to use when no tag can be found

      - name: Setup release version
        working-directory: .
        shell: bash
        run: |
          echo RELEASE_VERSION=$(sed -nE 's/^\s*version = "(.*?)"/\1/p' Cargo.toml) >> $GITHUB_ENV
          echo PREVIOUS_TAG=${{ steps.previoustag.outputs.tag }} >> $GITHUB_ENV
          echo SHORT_SHA=$(git rev-parse --short ${{ github.sha }}) >> $GITHUB_ENV

      - name: Verify release version
        shell: bash
        run: echo "Previous version is ${{ env.PREVIOUS_TAG }}"

      - name: Download compiled artifact
        uses: actions/download-artifact@v3
        with:
          name: fastrue-binaries
          path: ${{ github.workspace }}

      - name: Create tag and release
        id: create-release-tag
        # if: startsWith(github.ref, 'refs/tags/')
        if: env.RELEASE_VERSION != env.PREVIOUS_TAG
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.RELEASE_VERSION }}-b${{ env.PR_NUMBER }}
          target_commitish: ${{ github.ref_name }}
          body: "Release created by @${{ github.actor }} (${{ env.SHORT_SHA }})"
          # token: ${{ env.GITHUB_TOKEN }}
          generate_release_notes: true
          prerelease: true
          draft: false
          files: |
            fastrue-*.tar.gz
            fastrue-*.zip

      - name: Verify created release
        run: echo "Release v${{ env.RELEASE_VERSION }} ${{ github.ref_name }} -> ${{ steps.create-release-tag.outputs.url }}"

  deploy-demo:
    needs: [docker-images]
    runs-on: ubuntu-latest
    name: Deploy demo fly.io
    steps:
      - uses: actions/checkout@v3
      - uses: superfly/flyctl-actions@1.4
      - name: Deploy to Fly.io
        working-directory: .
        run: flyctl -c fly-source.toml deploy
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
