name: Release Edge

# References:
# - https://docs.docker.com/build/ci/github-actions/manage-tags-labels/
# - https://ectobit.com/blog/speed-up-github-actions-rust-pipelines/

on:
  pull_request:
    types: [closed]
    branches: ["main"]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

permissions:
  contents: write
  discussions: write
  deployments: write
  packages: write
  pull-requests: write

env:
  CARGO_TERM_COLOR: always
  CONTAINER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PR_NUMBER: ${{ github.event.number }}

jobs:
  build-binaries:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Run PNPM action
        uses: ./.github/pnpm-action
      - if: ${{ steps.cache-pnpm.outputs.cache-hit != 'true' }}
        name: Install NPM dependencies
        run: pnpm install && pnpm build

      - name: Setup Rust Toolchain
        uses: ./.github/rust-action
        with:
          target-toolchain: ${{ matrix.target }}

      - name: Get application variables
        id: getvar
        run: echo "app_version=$(toml get Cargo.toml package.version --raw)" >> $GITHUB_OUTPUT

      - name: Compile application binary
        run: cargo build --target ${{ matrix.target }} --release

      # - uses: actions/upload-artifact@v3
      #   with:
      #     name: fastrue-binaries
      #     path: ${{ github.workspace }}/uploads/
      #     if-no-files-found: error
      #     retention-days: 1

  # create-release:
  #   needs: [build-binaries]
  #   name: Create new release
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/download-artifact@v3
  #       id: download
  #       with:
  #         name: fastrue-binaries
  #         path: ${{ github.workspace }}

  #     - name: Get application variables
  #       id: getvar
  #       run: echo "app_version=$(cat ${{ github.workspace }}/VERSION.txt)" >> $GITHUB_OUTPUT

  #     - name: Create Release
  #       run: |
  #         echo ${{ steps.download.outputs.download-path }}
  #         gh release create v${{ steps.getvar.outputs.app_version }}-b${{ env.PR_NUMBER }} ${{ steps.download.outputs.download-path }}/*.zip --generate-notes --prerelease

  docker-images:
    needs: [build-binaries]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
    name: Docker images
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-qemu-action@v2
      - uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v2
        with:
          registry: ${{ env.CONTAINER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get application variables
        id: getvar
        shell: bash
        run: |
          curl -fsSL https://github.com/gnprice/toml-cli/releases/download/v0.2.3/toml-0.2.3-x86_64-linux.tar.gz -o toml.tar.gz
          tar -xzvf toml.tar.gz && mv toml-0.2.3-x86_64-linux/toml /usr/local/bin/toml
          echo "app_version=$(toml get Cargo.toml package.version --raw)" >> $GITHUB_OUTPUT

      - uses: docker/metadata-action@v4
        id: meta
        with:
          images: ${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,enable=true,priority=100,suffix=-b${{ env.PR_NUMBER }},value=${{ steps.getvar.outputs.app_version }}
            type=raw,enable=true,priority=200,value=edge

      - name: Build and push with tags
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          platforms: ${{ matrix.platform }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-demo:
    needs: [build-binaries]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: superfly/flyctl-actions@1.4
      - name: Deploy to Fly.io
        working-directory: .
        run: fly -c fly-source.toml deploy --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
