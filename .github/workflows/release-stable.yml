name: Release Stable

on:
  push:
    tags: ["v*.*.*"]
  pull_request:
    branches: ["main"]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

permissions:
  contents: write
  deployments: write
  packages: write
  pull-requests: write

env:
  CARGO_TERM_COLOR: always
  CONTAINER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # build-binaries:
  #   if: github.ref == 'refs/heads/main'
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       include:
  #         - os: ubuntu-latest
  #           target: x86_64-unknown-linux-gnu
  #           archive: tar.gz tar.xz
  #         - os: macos-latest
  #           target: x86_64-apple-darwin
  #         - os: macos-latest
  #           target: aarch64-apple-darwin
  #           archive: zip
  #         # - os: windows-latest
  #         #   target: x86_64-pc-windows-gnu
  #         #   archive: zip
  #   name: Build ${{ matrix.target }}
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0
  #     - name: Get variables
  #       id: vars
  #       run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

  #     - name: Run PNPM action
  #       uses: ./.github/pnpm-action
  #     - if: ${{ steps.cache-pnpm.outputs.cache-hit != 'true' }}
  #       name: Install NPM dependencies
  #       run: |
  #         pnpm install
  #         pnpm build

  #     - name: Setup Rust toolchain
  #       run: |
  #         rustup set auto-self-update disable
  #         rustup toolchain install stable --profile minimal --target ${{ matrix.target }}

  #     - uses: Swatinem/rust-cache@v2
  #       with:
  #         prefix-key: "rust-${{ matrix.target }}"
  #         env-vars: "RUSTFLAGS"
  #         cache-directories: ""
  #         cache-all-crates: true

  #     - name: Compile application binary
  #       id: compile
  #       run: |
  #         cargo build --release
  #         strip target/release/fastrue
  #         mv target/release/fastrue target/release/fastrue-${{ matrix.target }}

  #     - uses: actions/upload-artifact@v3
  #       with:
  #         name: fastrue-${{ matrix.target }}
  #         path: target/release/fastrue-${{ matrix.target }}

  docker-build:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          # - linux/arm64
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-qemu-action@v2
      - uses: docker/setup-buildx-action@v2
      -
        id: meta
        name: Extract Docker metadata
        uses: docker/metadata-action@v4
        with:
          # list of Docker images to use as base name for tags
          images: ${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}
          # generate Docker tags based on the following events/attributes
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
      -
        name: Login to registry ${{ env.CONTAINER_REGISTRY }}
        uses: docker/login-action@v2
        with:
          registry: ${{ env.CONTAINER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Build and push with tags
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          platforms: ${{ matrix.platform }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # create-release:
  #   needs: [build-binaries, build-images]
  #   if: github.ref == 'refs/heads/main'
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       include:
  #         - os: ubuntu-latest
  #           target: x86_64-unknown-linux-gnu
  #           archive: tar.gz tar.xz
  #         - os: macos-latest
  #           target: x86_64-apple-darwin
  #         - os: macos-latest
  #           target: aarch64-apple-darwin
  #           archive: zip
  #         # - os: windows-latest
  #         #   target: x86_64-pc-windows-gnu
  #         #   archive: zip
  #   name: Create Release
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0
  #     - uses: actions/download-artifact@v3
  #       with:
  #         name: fastrue-${{ matrix.target }}
  #         path: target/release/fastrue-${{ matrix.target }}
  #     - name: Generate Changelog
  #       run: echo "# Good things have arrived" > ${{ github.workspace }}-CHANGELOG.txt
  #     - name: Publish release
  #       uses: softprops/action-gh-release@v1
  #       # if: startsWith(github.ref, 'refs/tags/')
  #       with:
  #         tag_name: ${{ github.ref }}
  #         files: |
  #           target/release/fastrue-${{ matrix.target }}
  #           LICENSE
