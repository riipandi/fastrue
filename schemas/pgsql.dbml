
Enum "aal_level" {
  "aal1"
  "aal2"
  "aal3"
}

Enum "factor_type" {
  "totp"
  "webauthn"
}

Enum "factor_status" {
  "unverified"
  "verified"
}

Enum "code_challenge_method" {
  "s256"
  "plain"
}

Table "users" {
  "id" UUID [unique, not null]
  "uid" varchar(25) [unique, not null]
  "aud" varchar(255)
  "role" varchar(255)
  "email" varchar(255) [unique]
  "email_confirmed_at" timestamptz
  "email_change_token_new" varchar(255)
  "email_change" varchar(255)
  "email_change_sent_at" timestamptz
  "email_change_token_current" varchar(255) [default: ""]
  "email_change_confirm_status" smallint [default: 0]
  "phone" text [unique, default: NULL]
  "phone_confirmed_at" timestamptz [default: NULL]
  "phone_change" text [default: ""]
  "phone_change_token" varchar(255) [default: ""]
  "phone_change_sent_at" timestamptz [default: NULL]
  "invited_at" timestamptz
  "confirmation_token" varchar(255)
  "confirmation_sent_at" timestamptz
  "recovery_token" varchar(255)
  "recovery_sent_at" timestamptz
  "reauthentication_token" varchar(255) [default: ""]
  "reauthentication_sent_at" timestamptz [default: NULL]
  "last_sign_in_at" timestamptz
  "raw_app_meta_data" jsonb
  "raw_user_meta_data" jsonb
  "is_super_admin" BOOL
  "is_sso_user" BOOL [not null, default: FALSE, note: 'Auth: Set this column to true when the account comes from SSO. These accounts can have duplicate emails.']
  "confirmed_at" timestamptz
  "banned_until" timestamptz
  "created_at" timestamptz [not null, default: `timezone('utc'::text,now())`]
  "updated_at" timestamptz [not null, default: `timezone('utc'::text,now())`]
  "deleted_at" timestamptz

Indexes {
  id [pk, name: "users_pkey"]
  confirmation_token [type: btree, unique, name: "confirmation_token_idx"]
  recovery_token [type: btree, unique, name: "recovery_token_idx"]
  email_change_token_current [type: btree, unique, name: "email_change_token_current_idx"]
  email_change_token_new [type: btree, unique, name: "email_change_token_new_idx"]
  reauthentication_token [type: btree, unique, name: "reauthentication_token_idx"]
  email [unique, name: "users_email_partial_key"]
}
  Note: 'Auth: Stores user login data within a secure schema.'
}

Table "passwords" {
  "id" UUID [not null]
  "user_id" UUID [unique, not null]
  "encrypted_password" varchar(255) [not null]
  "created_at" timestamptz [not null, default: `timezone('utc'::text,now())`]
  "updated_at" timestamptz [not null, default: `timezone('utc'::text,now())`]

Indexes {
  id [pk, name: "passwords_pkey"]
  user_id [name: "passwords_user_id_idx"]
}
  Note: 'Auth: Stores encrypted password associated to a user.'
}

Table "sessions" {
  "id" UUID [not null]
  "user_id" UUID [not null]
  "factor_id" UUID
  "aal" aal_level
  "not_after" timestamptz [note: 'Auth: Not after is a nullable column that contains a timestamp after which the session should be regarded as expired.']
  "created_at" timestamptz [not null, default: `timezone('utc'::text,now())`]
  "updated_at" timestamptz [not null, default: `timezone('utc'::text,now())`]

Indexes {
  id [pk, name: "sessions_pkey"]
  user_id [name: "sessions_user_id_idx"]
  not_after [name: "sessions_not_after_idx"]
  (user_id, created_at) [name: "user_id_created_at_idx"]
}
  Note: 'Auth: Stores session data associated to a user.'
}

Table "refresh_tokens" {
  "id" UUID [not null]
  "parent" varchar(255)
  "token" varchar(255)
  "user_id" varchar(255)
  "revoked" BOOL
  "session_id" UUID
  "created_at" timestamptz [not null, default: `timezone('utc'::text,now())`]
  "updated_at" timestamptz [not null, default: `timezone('utc'::text,now())`]

Indexes {
  id [pk, name: "refresh_tokens_pkey"]
  token [unique, name: "refresh_tokens_token_unique"]
  token [type: btree, name: "refresh_tokens_token_idx"]
  parent [type: btree, name: "refresh_tokens_parent_idx"]
  (session_id, revoked) [name: "refresh_tokens_session_id_revoked_idx"]
  updated_at [name: "refresh_tokens_updated_at_idx"]
}
  Note: 'Auth: Store of tokens used to refresh JWT tokens once they expire.'
}

Table "audit_log_entries" {
  "id" UUID [not null]
  "payload" json
  "ip_address" varchar(64) [not null, default: ""]
  "created_at" timestamptz [not null, default: `timezone('utc'::text,now())`]

Indexes {
  id [pk, name: "audit_log_entries_pkey"]
}
  Note: 'Auth: Audit trail for user actions.'
}

Table "identities" {
  "id" text [not null]
  "user_id" UUID [not null]
  "identity_data" jsonb [not null]
  "provider" text [not null]
  "email" text [note: 'Auth: Email is a generated column that REFERENCES the optional email property in the identity_data']
  "last_sign_in_at" timestamptz
  "created_at" timestamptz [not null, default: `timezone('utc'::text,now())`]
  "updated_at" timestamptz [not null, default: `timezone('utc'::text,now())`]

Indexes {
  (provider, id) [pk, name: "identities_pkey"]
  user_id [type: btree, name: "identities_user_id_idx"]
  email [name: "identities_email_idx"]
}
  Note: 'Auth: Stores identities associated to a user.'
}

Table "mfa_factors" {
  "id" UUID [not null]
  "user_id" UUID [not null]
  "friendly_name" text
  "factor_type" factor_type [not null]
  "status" factor_status [not null]
  "created_at" timestamptz [not null, default: `timezone('utc'::text,now())`]
  "updated_at" timestamptz [not null, default: `timezone('utc'::text,now())`]
  "secret" text

Indexes {
  id [pk, name: "mfa_factors_pkey"]
  (friendly_name, user_id) [unique, name: "mfa_factors_user_friendly_name_unique"]
  user_id [name: "mfa_factors_user_id_idx"]
  (user_id, created_at) [name: "factor_id_created_at_idx"]
}
  Note: 'auth: stores metadata about factors'
}

Table "mfa_challenges" {
  "id" UUID [not null]
  "factor_id" UUID [not null]
  "created_at" timestamptz [not null]
  "verified_at" timestamptz
  "ip_address" inet [not null]

Indexes {
  id [pk, name: "mfa_challenges_pkey"]
  created_at [name: "mfa_challenge_created_at_idx"]
}
  Note: 'auth: stores metadata about challenge requests made'
}

Table "mfa_amr_claims" {
  "id" UUID [not null]
  "session_id" UUID [not null]
  "created_at" timestamptz [not null]
  "updated_at" timestamptz [not null]
  "authentication_method" text [not null]

Indexes {
  id [pk, name: "amr_id_pk"]
  (session_id, authentication_method) [unique, name: "mfa_amr_claims_session_id_authentication_method_pkey"]
}
  Note: 'auth: stores authenticator method REFERENCE claims for multi factor authentication'
}

Table "flow_state" {
  "id" UUID [pk]
  "user_id" UUID
  "auth_code" text [not null]
  "authentication_method" text [not null]
  "code_challenge_method" code_challenge_method [not null]
  "code_challenge" text [not null]
  "provider_type" text [not null]
  "provider_access_token" text
  "provider_refresh_token" text
  "created_at" timestamptz [not null, default: `timezone('utc'::text,now())`]
  "updated_at" timestamptz [not null, default: `timezone('utc'::text,now())`]

Indexes {
  auth_code [name: "idx_auth_code"]
  (user_id, authentication_method) [name: "idx_user_id_auth_method"]
  created_at [name: "flow_state_created_at_idx"]
}
  Note: 'stores metadata for oauth provider logins'
}

Table "sso_providers" {
  "id" UUID [not null]
  "resource_id" text [note: 'Auth: Uniquely identifies a SSO provider according to a user-chosen resource ID (case insensitive), useful in infrastructure as code.']
  "created_at" timestamptz [not null, default: `timezone('utc'::text,now())`]
  "updated_at" timestamptz [not null, default: `timezone('utc'::text,now())`]

Indexes {
  id [pk]
  `lower(resource_id)` [unique, name: "sso_providers_resource_id_idx"]
}
  Note: 'Auth: Manages SSO identity provider information; see saml_providers for SAML.'
}

Table "sso_domains" {
  "id" UUID [not null]
  "sso_provider_id" UUID [not null]
  "domain" text [not null]
  "created_at" timestamptz
  "updated_at" timestamptz

Indexes {
  id [pk]
  sso_provider_id [name: "sso_domains_sso_provider_id_idx"]
  `lower(domain)` [unique, name: "sso_domains_domain_idx"]
}
  Note: 'Auth: Manages SSO email address domain mapping to an SSO Identity Provider.'
}

Table "saml_providers" {
  "id" UUID [not null]
  "sso_provider_id" UUID [not null]
  "entity_id" text [unique, not null]
  "metadata_xml" text [not null]
  "metadata_url" text
  "attribute_mapping" jsonb
  "created_at" timestamptz
  "updated_at" timestamptz

Indexes {
  id [pk]
  sso_provider_id [name: "saml_providers_sso_provider_id_idx"]
}
  Note: 'Auth: Manages SAML Identity Provider connections.'
}

Table "saml_relay_states" {
  "id" UUID [not null]
  "sso_provider_id" UUID [not null]
  "flow_state_id" UUID
  "request_id" text [not null]
  "for_email" text
  "redirect_to" text
  "from_ip_address" inet
  "created_at" timestamptz
  "updated_at" timestamptz

Indexes {
  id [pk]
  sso_provider_id [name: "saml_relay_states_sso_provider_id_idx"]
  for_email [name: "saml_relay_states_for_email_idx"]
  created_at [name: "saml_relay_states_created_at_idx"]
}
  Note: 'Auth: Contains SAML Relay State information for each Service Provider initiated login.'
}

Ref "passwords_user_id_fkey":"users"."id" < "passwords"."user_id" [delete: cascade]

Ref "sessions_user_id_fkey":"users"."id" < "sessions"."user_id" [delete: cascade]

Ref "refresh_tokens_session_id_fkey":"sessions"."id" < "refresh_tokens"."session_id" [delete: cascade]

Ref "identities_user_id_fkey":"users"."id" < "identities"."user_id" [delete: cascade]

Ref "mfa_factors_user_id_fkey":"users"."id" < "mfa_factors"."user_id" [delete: cascade]

Ref "mfa_challenges_auth_factor_id_fkey":"mfa_factors"."id" < "mfa_challenges"."factor_id" [delete: cascade]

Ref "mfa_amr_claims_session_id_fkey":"sessions"."id" < "mfa_amr_claims"."session_id" [delete: cascade]

Ref:"sso_providers"."id" < "sso_domains"."sso_provider_id" [delete: cascade]

Ref:"sso_providers"."id" < "saml_providers"."sso_provider_id" [delete: cascade]

Ref:"sso_providers"."id" < "saml_relay_states"."sso_provider_id" [delete: cascade]

Ref:"flow_state"."id" < "saml_relay_states"."flow_state_id" [delete: cascade]
